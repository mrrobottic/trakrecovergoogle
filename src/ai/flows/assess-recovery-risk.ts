// This file is automatically generated by Firebase Studio.
'use server';

/**
 * @fileOverview A risk assessment AI agent to evaluate the likelihood of recovering funds based on scam incident details.
 *
 * - assessRecoveryRisk - A function that handles the risk assessment process.
 * - AssessRecoveryRiskInput - The input type for the assessRecoveryRisk function.
 * - AssessRecoveryRiskOutput - The return type for the assessRecoveryRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessRecoveryRiskInputSchema = z.object({
  scamType: z.string().describe('The type of scam the user experienced (e.g., investment scam, romance scam).'),
  amountLost: z.number().describe('The amount of money the user lost in the scam.'),
  timeElapsed: z.string().describe('The amount of time that has passed since the scam occurred (e.g., days, weeks, months).'),
  details: z.string().describe('Additional details about the scam incident.'),
});

export type AssessRecoveryRiskInput = z.infer<typeof AssessRecoveryRiskInputSchema>;

const AssessRecoveryRiskOutputSchema = z.object({
  likelihood: z.string().describe('The estimated likelihood of recovering the funds (e.g., very low, low, moderate, high, very high).'),
  factors: z.string().describe('The key factors influencing the likelihood of recovery.'),
  recommendations: z.string().describe('Recommendations for the user based on the risk assessment.'),
});

export type AssessRecoveryRiskOutput = z.infer<typeof AssessRecoveryRiskOutputSchema>;

export async function assessRecoveryRisk(input: AssessRecoveryRiskInput): Promise<AssessRecoveryRiskOutput> {
  return assessRecoveryRiskFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assessRecoveryRiskPrompt',
  input: {schema: AssessRecoveryRiskInputSchema},
  output: {schema: AssessRecoveryRiskOutputSchema},
  prompt: `You are an AI-powered risk assessment tool designed to evaluate the likelihood of recovering funds lost in a scam incident.

  Based on the details provided by the user, estimate the likelihood of recovery and provide recommendations.

  Scam Type: {{{scamType}}}
  Amount Lost: {{{amountLost}}}
  Time Elapsed: {{{timeElapsed}}}
  Details: {{{details}}}

  Consider the following factors when assessing the risk:
  - The type of scam (some scams are more easily recoverable than others).
  - The amount of money lost (larger amounts may be more difficult to recover).
  - The time elapsed since the scam occurred (the sooner the user takes action, the better).
  - The details of the scam incident (e.g., whether the user has reported the scam to the authorities).

  Provide a likelihood of recovery (very low, low, moderate, high, very high), the key factors influencing the likelihood of recovery, and recommendations for the user.

  Ensure that the output matches the AssessRecoveryRiskOutputSchema schema.
  `,
});

const assessRecoveryRiskFlow = ai.defineFlow(
  {
    name: 'assessRecoveryRiskFlow',
    inputSchema: AssessRecoveryRiskInputSchema,
    outputSchema: AssessRecoveryRiskOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
